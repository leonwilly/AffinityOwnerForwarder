/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface AffinityOwnerProxyInterface extends ethers.utils.Interface {
  functions: {
    "AOP_EXTERNAL_PERMISSION()": FunctionFragment;
    "AOP_OWNER_PERMISSION()": FunctionFragment;
    "getAffinityTokenAddress()": FunctionFragment;
    "getAmountsOut(uint256,address[])": FunctionFragment;
    "getOwnerProxyPermissions(address)": FunctionFragment;
    "setOwnerProxyAffinityTokenAddress(address)": FunctionFragment;
    "setOwnerProxyPermission(address,uint256)": FunctionFragment;
    "setOwnerProxyUniswapV2Router02(address)": FunctionFragment;
    "swapExactETHForTokens(uint256,address[],address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "AOP_EXTERNAL_PERMISSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AOP_OWNER_PERMISSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAffinityTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountsOut",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnerProxyPermissions",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwnerProxyAffinityTokenAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwnerProxyPermission",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwnerProxyUniswapV2Router02",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactETHForTokens",
    values: [BigNumberish, string[], string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "AOP_EXTERNAL_PERMISSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AOP_OWNER_PERMISSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAffinityTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountsOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerProxyPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOwnerProxyAffinityTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOwnerProxyPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOwnerProxyUniswapV2Router02",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactETHForTokens",
    data: BytesLike
  ): Result;

  events: {};
}

export class OwnerProxy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AffinityOwnerProxyInterface;

  functions: {
    AOP_EXTERNAL_PERMISSION(overrides?: CallOverrides): Promise<[BigNumber]>;

    AOP_OWNER_PERMISSION(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAffinityTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    getAmountsOut(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { amounts: BigNumber[] }>;

    getOwnerProxyPermissions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setOwnerProxyAffinityTokenAddress(
      affinityTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOwnerProxyPermission(
      account: string,
      permission: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOwnerProxyUniswapV2Router02(
      uniswapV2Router02Address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapExactETHForTokens(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  AOP_EXTERNAL_PERMISSION(overrides?: CallOverrides): Promise<BigNumber>;

  AOP_OWNER_PERMISSION(overrides?: CallOverrides): Promise<BigNumber>;

  getAffinityTokenAddress(overrides?: CallOverrides): Promise<string>;

  getAmountsOut(
    amountIn: BigNumberish,
    path: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getOwnerProxyPermissions(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setOwnerProxyAffinityTokenAddress(
    affinityTokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOwnerProxyPermission(
    account: string,
    permission: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOwnerProxyUniswapV2Router02(
    uniswapV2Router02Address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapExactETHForTokens(
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    AOP_EXTERNAL_PERMISSION(overrides?: CallOverrides): Promise<BigNumber>;

    AOP_OWNER_PERMISSION(overrides?: CallOverrides): Promise<BigNumber>;

    getAffinityTokenAddress(overrides?: CallOverrides): Promise<string>;

    getAmountsOut(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getOwnerProxyPermissions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setOwnerProxyAffinityTokenAddress(
      affinityTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwnerProxyPermission(
      account: string,
      permission: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwnerProxyUniswapV2Router02(
      uniswapV2Router02Address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    swapExactETHForTokens(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    AOP_EXTERNAL_PERMISSION(overrides?: CallOverrides): Promise<BigNumber>;

    AOP_OWNER_PERMISSION(overrides?: CallOverrides): Promise<BigNumber>;

    getAffinityTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getAmountsOut(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwnerProxyPermissions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setOwnerProxyAffinityTokenAddress(
      affinityTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOwnerProxyPermission(
      account: string,
      permission: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOwnerProxyUniswapV2Router02(
      uniswapV2Router02Address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapExactETHForTokens(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AOP_EXTERNAL_PERMISSION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    AOP_OWNER_PERMISSION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAffinityTokenAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountsOut(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwnerProxyPermissions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setOwnerProxyAffinityTokenAddress(
      affinityTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOwnerProxyPermission(
      account: string,
      permission: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOwnerProxyUniswapV2Router02(
      uniswapV2Router02Address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapExactETHForTokens(
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
